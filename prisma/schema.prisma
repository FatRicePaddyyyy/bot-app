// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
    directUrl = env("DIRECT_URL")
}

// Necessary for Next auth
model Account {
    id                       String  @id @default(cuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String? // @db.Text
    access_token             String? // @db.Text
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String? // @db.Text
    session_state            String?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    refresh_token_expires_in Int?

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Prompt {
    id          Int       @id @default(autoincrement())
    title       String
    content     String
    isTemplate  Boolean?  @default(false)
    isFavorite  Boolean?  @default(false)
    createdAt   DateTime  @default(now())
    user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId      String
    tasks       Task[]
    categories  PromptCategory[]
}

model Category {
    id          Int       @id @default(autoincrement())
    name        String
    createdAt   DateTime  @default(now())
    user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId      String
    prompts     PromptCategory[]
}

model PromptCategory {
    id          Int       @id @default(autoincrement())
    createdAt   DateTime  @default(now())
    prompt      Prompt    @relation(fields: [promptId], references: [id])
    promptId    Int
    category    Category  @relation(fields: [categoryId], references: [id])
    categoryId  Int

    @@unique([promptId, categoryId])
}

model TwitterAccount {
    id                      Int       @id @default(autoincrement())
    name                    String
    twitterHandle           String
    twitterApiKey          String?
    twitterApiSecretKey    String?
    twitterAccessToken     String?
    twitterAccessTokenSecret String?
    createdAt              DateTime  @default(now())
    user                    User      @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId                  String
    tasks                   Task[]
    twitterPosts           TwitterPost[]
}

enum TaskType {
    TWEET
    SCHEDULE
}

model Task {
    id                Int       @id @default(autoincrement())
    taskType         TaskType 
    isActive         Boolean   @default(true)
    isDraft          Boolean   @default(false)
    isDeleted        Boolean?  @default(false)
    cronSchedule     String?
    compiledPrompt   String?
    editedContent    String?
    aiProvider       String?
    lastExecutedAt   DateTime?
    nextExecutionAt  DateTime?
    createdAt        DateTime  @default(now())
    prompt           Prompt    @relation(fields: [promptId], references: [id])
    promptId         Int
    twitterAccount   TwitterAccount @relation(fields: [twitterAccountId], references: [id])
    twitterAccountId Int
    twitterPosts     TwitterPost[]
    taskImages       TaskImage[]
}

model TwitterPost {
    id                Int       @id @default(autoincrement())
    tweetContent      String
    errorCode        Int?
    errorMessage     String?
    postedAt         DateTime?
    createdAt        DateTime  @default(now())
    task             Task?     @relation(fields: [taskId], references: [id])
    taskId           Int?
    twitterAccount   TwitterAccount @relation(fields: [twitterAccountId], references: [id])
    twitterAccountId Int
}

model TaskImage {
    id          Int       @id @default(autoincrement())
    filePath    String
    createdAt   DateTime  @default(now())
    task        Task      @relation(fields: [taskId], references: [id])
    taskId      Int
}

model Setting {
    id          Int       @id @default(autoincrement())
    key         String?
    value       String?
    createdAt   DateTime  @default(now())
    user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId      String
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    prompts       Prompt[]
    categories    Category[]
    settings      Setting[]
    twitterAccounts TwitterAccount[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
